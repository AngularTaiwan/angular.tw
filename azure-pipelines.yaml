resources:
- repo: self

pool:
  vmImage: Hosted Ubuntu 1604
steps:
- script: pwd
  displayName: 'Check PWD'

- script: |
   lsb_release -a

  displayName: 'Check Ubuntu Version'

- script: |
   sudo apt-get install -y build-essential cmake doxygen

   cd $(Agent.BuildDirectory)

   wget https://github.com/BYVoid/OpenCC/archive/ver.1.0.5.tar.gz
   tar zxf ver.1.0.5.tar.gz
   cd OpenCC-ver.1.0.5
   make
   sudo make install

   cd ..

   rm -rf OpenCC-ver.1.0.5
   rm -f ver.1.0.5.tar.gz

  displayName: 'Install OpenCC'

- script: |
   cd $(Agent.BuildDirectory)

   OPENCC=/usr/share/opencc

   curl -sSL -o TEMP-TWPhrasesAngular.txt https://gist.githubusercontent.com/doggy8088/5d965d7219413fdabe586212e3d4700b/raw/ec43758a1f1dfd31d419bf8b55a6d0d59f8dcefb/TEMP-TWPhrasesAngular.txt

   curl -sSL -o TEMP-STPhrasesAngular.txt https://gist.githubusercontent.com/doggy8088/57b77b625e60b337fd96001b2e7c4b0e/raw/234c651b88c98da92e5265f52168d3f891b4192c/TEMP-STPhrasesAngular.txt

   sudo opencc_dict -f text -t ocd -i TEMP-STPhrasesAngular.txt -o $OPENCC/STPhrases-Angular.ocd

   sudo opencc_dict -f text -t ocd -i TEMP-TWPhrasesAngular.txt -o $OPENCC/TWPhrases-Angular.ocd

   cat <<EOF | sudo tee $OPENCC/s2twp-Angular.json
   {
       "name": "Simplified Chinese to Traditional Chinese (Taiwan standard, with phrases, with Angular)",
       "segmentation": {
           "type": "mmseg",
           "dict": {
               "type": "ocd",
               "file": "STPhrases-Angular.ocd"
           }
       },
       "conversion_chain": [
           {
               "dict": {
                   "type": "group",
                   "dicts": [
                       {
                           "type": "ocd",
                           "file": "STPhrases-Angular.ocd"
                       },
                       {
                           "type": "ocd",
                           "file": "STCharacters.ocd"
                       }
                   ]
               }
           },
           {
               "dict": {
                   "type": "ocd",
                   "file": "TWPhrases-Angular.ocd"
               }
           },
           {
               "dict": {
                   "type": "ocd",
                   "file": "TWVariants.ocd"
               }
           }
       ]
   }
   EOF

   ls -laF $OPENCC/

  displayName: 'Make Angular Dict for OpenCC'

- script: |
   sudo apt install uni2ascii -y

   dpkg -L uni2ascii


  displayName: 'Install uni2ascii'

- script: |
   find . -name '*.html'   -type f -exec echo '{}' \; -exec opencc -c s2twp-Angular -i '{}' -o '{}' \;

   find . -name '*.json'   -type f -exec echo '{}' \; -exec opencc -c s2twp-Angular -i '{}' -o '{}' \;

   find . -name '*.js.map' -type f -exec echo '{}' \; -exec opencc -c s2twp-Angular -i '{}' -o '{}'

   find . -name '*.js' -type f -exec echo '{}' \; -exec sh -c 'ascii2uni -a U -q {} > {}.new' \; -exec sh -c 'mv {}.new {}' \; -exec opencc -c s2twp-Angular -i '{}' -o '{}' \;

  displayName: 'Run S2T Conversion'

- script: |
   cat <<EOF > web.config
   <?xml version="1.0"?>
   <configuration>
       <system.webServer>
           <staticContent>
               <mimeMap fileExtension=".json" mimeType="application/json" />
           </staticContent>
           <rewrite>
             <rules>
               <rule name="SPA" stopProcessing="true">
                 <match url=".*" />
                 <action type="Rewrite" url="/" />
                 <conditions>
                   <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                 </conditions>
               </rule>
             </rules>
           </rewrite>
       </system.webServer>
   </configuration>
   EOF

  displayName: 'Add web.config'

- script: 'find . -type f -name ''*.css' -exec sed -i 's/font-family:Roboto/font-family:"Microsoft JhengHei",Roboto/g' '{}' \;'
  displayName: 'Fix CSS font-family'

- script: |
   cat <<EOF > patch-navigation.js
   let data = require("./generated/navigation.json");
   const fs = require('fs');

   for (let i = 0; i < data.SideNav.length; i++) {
       const item = data.SideNav[i];
       if (item.title == '-') {
           data.SideNav.splice(i + 1);
           break;
       }
   }

   data.SideNav.push({
       "title": "Angular Taiwan (FB)",
       "tooltip": "台灣 Angular 臉書社團",
       "url": "https://www.facebook.com/groups/augularjs.tw/"
   });
   data.SideNav.push({
       "title": "Angular Taiwan (YouTube)",
       "tooltip": "台灣 Angular YouTube 頻道，有大量影音學習資源。",
       "url": "https://www.youtube.com/c/AngularUserGroupTaiwan"
   });
   data.SideNav.push({
       "title": "Angular Taiwan 線上讀書會",
       "tooltip": "讀書會每周三晚上 8:30 進行，每季更換主題，歡迎加入。",
       "url": "https://www.facebook.com/groups/1345890212093830/"
   });
   data.SideNav.push({
       "title": "台灣 Angular 技術論壇",
       "tooltip": "如何讓學習 Angular 的腳步變得紮實快速？如何讓學習變得有趣不孤單？台灣 Angular 技術論壇就是一個讓您盡情發問的好地方，從新手入門到刁鑽難題，都有一群熱心的愛好者關心您的每個問題，也期待您在獲取知識之後，為後人解答更多疑惑，教學相長，在精進技術的路上我們一同努力！",
       "url": "https://forum.angular.tw/"
   });
   data.SideNav.push({
       "title": "官方 Material 元件庫",
       "tooltip": "Angular Material 元件庫的中文文件",
       "url": "https://material.angular.cn"
   });
   data.SideNav.push({
       "title": "ng-zorro 元件庫",
       "tooltip": "Ant Design 的 Angular 實現，服務於企業級後臺產品。",
       "url": "https://ng.ant.design/"
   });
   data.SideNav.push({
       "title": "ng-zorro mobile 元件庫",
       "tooltip": "Ant Design Mobile 的 Angular 實現，服務於無線產品。",
       "url": "https://ng.mobile.ant.design/"
   });
   data.SideNav.push({
       "url": "https://flutter-io.cn/",
       "tooltip": "Flutter 中文文件站",
       "title": "友站：Flutter 中文"
   });
   data.SideNav.push({
       "title": "Angular Taiwan 2018",
       "tooltip": "台灣首屆 Angular 技術大會",
       "url": "https://2018.angular.tw/"
   });

   // console.log(data);
   // console.log(JSON.stringify(data));

   fs.writeFile("generated/navigation.json", JSON.stringify(data), function(err) {
       if(err) {
           return console.log(err);
       }
   });
   EOF

   node ./patch-navigation.js

   rm ./patch-navigation.js

  displayName: 'Fix Menu items'

- script: 'rsync -av . $(Build.ArtifactStagingDirectory) --exclude .git --exclude .github'
  displayName: 'Copy to StagingDirectory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

